# -*- coding: utf-8 -*-
"""HIT137_Assignment2_1Ans_Nafisa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HkGQdjKxjn40BRTS-GSPRh5wMryfmqb_

Nafisa Mustari, ID:395783.
"""

from google.colab import files
import pandas as pd
import string
import os

"""I need to code these parts: When run, your program should automatically-
1. Prompt the user for shift1 and shift2 values
2. Encrypt the contents of "raw_text.txt"
3. Decrypt the encrypted file
4. Verify the decryption matches the original

# **Now I will encrypt the raw text in a encrypted file.**
• For lowercase letters:
o If the letter is in the first half of the alphabet (a-m): shift forward by shift1 *
shift2 positions
o If the letter is in the second half (n-z): shift backward by shift1 + shift2
positions
• For uppercase letters:
o If the letter is in the first half (A-M): shift backward by shift1 positions
o If the letter is in the second half (N-Z): shift forward by shift2² positions
(shift2 squared)
• Other characters:
o Spaces, tabs, newlines, special characters, and numbers remain
unchanged
"""

def encrypt_text(text, shift1, shift2):
    first_lower  = 'abcdefghijklm'   # 13 chars
    second_lower = 'nopqrstuvwxyz'   # 13 chars
    first_upper  = 'ABCDEFGHIJKLM'   # 13 chars
    second_upper = 'NOPQRSTUVWXYZ'   # 13 chars

    # precompute effective shifts modulo 13
    s_lower_first  = (shift1 * shift2) % 13
    s_lower_second = (shift1 + shift2) % 13
    s_upper_first  = (shift1 % 13)
    s_upper_second = ((shift2 * shift2) % 13)

    out = []
    for ch in text:
        if ch in first_lower:
            i = first_lower.index(ch)
            out.append(first_lower[(i + s_lower_first) % 13]) # a-m: forward
        elif ch in second_lower:
            i = second_lower.index(ch)
            out.append(second_lower[(i - s_lower_second) % 13]) # n-z: backward
        elif ch in first_upper:
            i = first_upper.index(ch)
            out.append(first_upper[(i - s_upper_first) % 13]) # A-M: backward
        elif ch in second_upper:
            i = second_upper.index(ch)
            out.append(second_upper[(i + s_upper_second) % 13])  # N-Z: forward

        else:
            out.append(ch)
    return ''.join(out)

"""### **Decryption function. For decryption I will reverse the encryption Method.**"""

def decrypt_text(text, shift1, shift2):
    first_lower  = 'abcdefghijklm'
    second_lower = 'nopqrstuvwxyz'
    first_upper  = 'ABCDEFGHIJKLM'
    second_upper = 'NOPQRSTUVWXYZ'

    s_lower_first  = (shift1 * shift2) % 13
    s_lower_second = (shift1 + shift2) % 13
    s_upper_first  = (shift1 % 13)
    s_upper_second = ((shift2 * shift2) % 13)

    out = []
    for ch in text:
        if ch in first_lower:
            i = first_lower.index(ch)
            out.append(first_lower[(i - s_lower_first) % 13])
        elif ch in second_lower:
            i = second_lower.index(ch)
            out.append(second_lower[(i + s_lower_second) % 13])
        elif ch in first_upper:
            i = first_upper.index(ch)
            out.append(first_upper[(i + s_upper_first) % 13])
        elif ch in second_upper:
            i = second_upper.index(ch)
            out.append(second_upper[(i - s_upper_second) % 13])
        else:
            out.append(ch)
    return ''.join(out)

"""# **Main Function**"""

def main():
 # First User wiil Be Asked to Enter the input of Shift value
 shift1 = int(input("Enter shift1: "))
 shift2 = int(input("Enter shift2: "))


 print("shift1 =", shift1)
 print("shift2 =", shift2)
 #Now the User will be asked to enter the raw file
 print("Please Upload your text file for encryption")
 upload_raw_text_file = files.upload()
 # Read the  file
 raw_filename = list(upload_raw_text_file.keys())[0]
 with open(raw_filename, "r") as f:
    raw_text_file = f.read().rstrip('\n')



 print(raw_text_file)

  #encrypt the whole text
 encrypted_text = encrypt_text(raw_text_file, shift1, shift2)

 #encrypt in a file and provide download link
 with open("encrypted_text.txt", "w") as f:
    f.write(encrypted_text)

 files.download("encrypted_text.txt")
 print(encrypted_text)
 print("File have been downloaded in the name of encrypted_text.txt ")


 # Decrypted text (from decryption function)
 decrypted_text = decrypt_text(encrypted_text, shift1, shift2)

 # Save decrypted text to file
 with open("decrypted_text.txt", "w") as f:
    f.write(decrypted_text)

 # Download decrypted file
 print(decrypted_text)
 files.download("decrypted_text.txt")
 print("Decrypted file is downloaded as decrypted_text.txt")

 #Verification

 if raw_text_file == decrypted_text:
    print("Verification Successful as the decrypted file matches with the raw file")
 else:
    print("Verification is Unsuccessful as the decrypted file does not match with the raw file")
# Run the main function
if __name__ == "__main__":
    main()
