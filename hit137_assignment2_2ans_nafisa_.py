# -*- coding: utf-8 -*-
"""HIT137_Assignment2_2Ans_Nafisa..ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TsnNmdkAc7iLwlCnH85OOT79twGXLIka
"""

from google.colab import files
import os
import zipfile

"""Upload files"""

uploaded = files.upload()

# Createing a folder to store all datasets
os.makedirs("temperatures", exist_ok=True)

# Moving uploaded files into the "temperatures" folder
for fname in uploaded.keys():
    os.rename(fname, os.path.join("temperatures", fname))

import os
import pandas as pd

# Merging all files
folder_path = "temperatures"
csv_files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith(".csv")]
df_list = [pd.read_csv(f) for f in csv_files]
merged_df = pd.concat(df_list, ignore_index=True)

# Save merged dataset
merged_df.to_csv("merged_temperatures.csv", index=False)
print("Total rows:", len(merged_df))
print("Columns:", list(merged_df.columns))

# ----- Seasonal Average Calculation -----
# Define Australian seasons
seasons = {
    "Summer": ["December", "January", "February"],
    "Autumn": ["March", "April", "May"],
    "Winter": ["June", "July", "August"],
    "Spring": ["September", "October", "November"]
}

# Calculate seasonal averages
seasonal_avg = {}
for season, months in seasons.items():
    seasonal_avg[season] = merged_df[months].stack().mean(skipna=True)

# Save seasonal averages to text file
with open("average_temp.txt", "w") as f:
    for season, avg in seasonal_avg.items():
        f.write(f"{season}: {avg:.1f}°C\n")

# Print results
for season, avg in seasonal_avg.items():
    print(f"{season}: {avg:.1f}°C")

import pandas as pd

# Assuming merged_df is already loaded
# Monthly columns
months = ['January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December']

# Calculate max, min, and range for each station (ignore NaN)
merged_df['Max_Temp'] = merged_df[months].max(axis=1, skipna=True)
merged_df['Min_Temp'] = merged_df[months].min(axis=1, skipna=True)
merged_df['Temp_Range'] = merged_df['Max_Temp'] - merged_df['Min_Temp']

# Find the largest range
max_range = merged_df['Temp_Range'].max()

# Filter stations with the largest range
largest_range_stations = merged_df[merged_df['Temp_Range'] == max_range]

# Save results to text file
with open("largest_temp_range_station.txt", "w") as f:
    for _, row in largest_range_stations.iterrows():
        f.write(f"Station {row['STATION_NAME']}: Range {row['Temp_Range']:.1f}°C "
                f"(Max: {row['Max_Temp']:.1f}°C, Min: {row['Min_Temp']:.1f}°C)\n")

# Optional: print results
for _, row in largest_range_stations.iterrows():
    print(f"Station {row['STATION_NAME']}: Range {row['Temp_Range']:.1f}°C "
          f"(Max: {row['Max_Temp']:.1f}°C, Min: {row['Min_Temp']:.1f}°C)")

# Monthly columns
months = ['January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December']

# Calculate standard deviation per station (ignore NaN)
merged_df['Temp_StdDev'] = merged_df[months].std(axis=1, skipna=True)

# Find smallest and largest std deviation
min_std = merged_df['Temp_StdDev'].min()
max_std = merged_df['Temp_StdDev'].max()

# Stations with most stable temperatures
most_stable = merged_df[merged_df['Temp_StdDev'] == min_std]

# Stations with most variable temperatures
most_variable = merged_df[merged_df['Temp_StdDev'] == max_std]

# Save results to text file
with open("temperature_stability_stations.txt", "w") as f:
    for _, row in most_stable.iterrows():
        f.write(f"Most Stable: Station {row['STATION_NAME']}: StdDev {row['Temp_StdDev']:.1f}°C\n")
    for _, row in most_variable.iterrows():
        f.write(f"Most Variable: Station {row['STATION_NAME']}: StdDev {row['Temp_StdDev']:.1f}°C\n")

# Optional: print results
for _, row in most_stable.iterrows():
    print(f"Most Stable: Station {row['STATION_NAME']}: StdDev {row['Temp_StdDev']:.1f}°C")
for _, row in most_variable.iterrows():
    print(f"Most Variable: Station {row['STATION_NAME']}: StdDev {row['Temp_StdDev']:.1f}°C")